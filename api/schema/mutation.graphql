# All logic specific to mutation. Types that are used in both queries and
# mutations live in query.graphql

"""
Root mutation
"""
type Mutation {
  """
  Apply a single tag to a single item. If the item does not exist, this will do nothing. If the tag does not exist, it will be created
  """
  addTag(
    """
    All input fields
    """
    input: AddTagInput!
  ): AddTagPayload! @juniper(async: true, ownership: "owned")

  """
  Delete a single tag from a single item. If the item or tag does not exist, this will do nothing
  """
  deleteTag(
    """
    All input fields
    """
    input: DeleteTagInput!
  ): DeleteTagPayload! @juniper(async: true, ownership: "owned")
}

"""
Input for the addTag mutation
"""
input AddTagInput {
  """
  Item to apply the tag to
  """
  itemUri: SpotifyUri!

  """
  Tag to apply
  """
  tag: Tag!
}

"""
Output for the addTag mutation
"""
type AddTagPayload {
  """
  The tagged item. `null` if the item does not exist in Spotify
  """
  itemEdge: TaggedItemEdge @juniper(infallible: true)

  """
  The modified tag, so the list of items for this tag can easily be grabbed.
  If the item didn't exist, this is still returned, but its member items will
  be the same as before the mutation
  """
  tagEdge: TagEdge! @juniper(infallible: true)
}

"""
Input for the deleteTag mutation
"""
input DeleteTagInput {
  """
  Item to delete the tag from
  """
  itemUri: SpotifyUri!

  """
  Tag to be deleted
  """
  tag: Tag!
}

"""
Output for the deleteTag mutation
"""
type DeleteTagPayload {
  """
  The de-tagged item. `null` if the item does not exist in Spotify. If the item
  exists but did not have the tag applied, then it will still be returned as if
  the tag had been deleted
  """
  itemEdge: TaggedItemEdge @juniper(infallible: true)

  """
  The modified tag, so the list of items for this tag can easily be grabbed.
  If the item didn't exist or didn't have this tag applied, this is still
  returned, but its member items will be the same as before the mutation
  """
  tagEdge: TagEdge! @juniper(infallible: true)
}
