# Query types specific to our app. Includes types are used in both queries
# and mutations.

"""
The root query.
"""
type Query {
  """
  Fetch a single node, of any type, via a UUID.
  """
  node(
    """
    The UUID of the node to fetch.
    """
    id: ID!
  ): Node @juniper(async: true, ownership: "owned")

  """
  The currently logged-in user. All API access requires authentication, so this
  will always return a result.
  """
  currentUser: PrivateUser! @juniper(async: true, ownership: "owned")

  """
  Get a single item by its unique URI. Return `null` if the URI does not exist
  in Spotify
  """
  item(uri: String!): TaggedItemNode @juniper(async: true, ownership: "owned")

  """
  Run a search query against all taggable Spotify items. The return value will
  contain all the matching results (within the page of data), grouped by their
  category.

  The Spotify search API only supports paginating these results in lock-step,
  meaning each item category (track, album, etc.) will use the same `first` and
  `after` params.

  https://developer.spotify.com/documentation/web-api/reference/#category-search
  """
  itemSearch(
    query: String!

    """
    The maximum number of results to return. If null, will be unlimited.
    """
    first: Int

    """
    The cursor AFTER which elements will start being included. The element
    referred to by this cursor WILL NOT be in the output. The first element in
    the output will be the element AFTER this cursor. If null, results will
    start from the beginning of the collection.
    """
    after: Cursor
  ): ItemSearch! @juniper(async: true, ownership: "owned")

  # TODO support pagination on this
  """
  Get a list of all tags that the user has created
  """
  tags: TagConnection! @juniper(infallible: true, ownership: "owned")

  """
  Get a single tag that the user has created. This will always return a node,
  even if the tag doesn't actually exist in the system. In that case, it will
  be returned but show no tagged items
  """
  tag(tag: String!): TagNode! @juniper(async: true, ownership: "owned")
}

"""
A single tag and the items to which it has been applied. Each tag node is unique
for the pairing of tag+user
"""
type TagNode implements Node {
  """
  Unique ID for this tag node, for Relay re-fetching
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  The tag that (along with the requesting user) uniquely identifies this node
  """
  tag: String! @juniper(infallible: true)

  # TODO support pagination on this field
  """
  The items that have this tag applied
  """
  items: TaggedItemConnection! @juniper(infallible: true, ownership: "owned")
}

"""
Edge for TagNode
"""
type TagEdge implements Edge {
  """
  The related node
  """
  node: TagNode! @juniper(infallible: true)

  """
  Identifier for this edge
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
Connection for paginating through a list of TagNode
"""
type TagConnection implements ConnectionInterface {
  """
  See Connection definition.
  """
  totalCount: Int! @juniper(async: true, ownership: "owned")

  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(async: true, ownership: "owned")

  """
  The queried user programs.
  """
  edges: [TagEdge!]! @juniper(async: true, ownership: "owned")
}

"""
Any Spotify item that can be tagged. This does **not** include all Spotify
types, e.g. user is not included in this.
"""
interface Item {
  externalUrls: ExternalUrls! @juniper(infallible: true)
  href: String! @juniper(infallible: true)
  id: String! @juniper(infallible: true)
  uri: String! @juniper(infallible: true, ownership: "owned")
}

"""
A Spotify item (track, album, artist) etc. that supports tags, with a reference
to the list of tags that has been applied to it. Each of these nodes is unique
to a pairing of item+user
"""
type TaggedItemNode implements Node {
  """
  Unique ID for this tag node, for Relay re-fetching
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  The tagged/taggable item, as fetched from Spotify
  """
  item: Item! @juniper(infallible: true)

  # TODO support pagination on this field
  """
  All tags that have been applied to this item. _Can_ be empty
  """
  tags: TagConnection! @juniper(infallible: true, ownership: "owned")
}

"""
Edge for TaggedItemNode
"""
type TaggedItemEdge implements Edge {
  """
  The related node
  """
  node: TaggedItemNode! @juniper(infallible: true)

  """
  Identifier for this edge
  """
  cursor: Cursor! @juniper(infallible: true)
}

"""
Connection for paginating through a list of TaggedItemNode
"""
type TaggedItemConnection implements ConnectionInterface {
  """
  See Connection definition.
  """
  totalCount: Int! @juniper(async: true, ownership: "owned")
  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(async: true, ownership: "owned")
  """
  The queried user programs.
  """
  edges: [TaggedItemEdge!]! @juniper(async: true, ownership: "owned")
}

"""
The result of performing a search query on the Spotify API. This contains one
subfield for every category of taggable items. See the itemSearch query field
that returns this type for more info
"""
type ItemSearch {
  """
  Tracks that matched the search query
  """
  tracks: TaggedItemConnection! @juniper(infallible: true)

  """
  Albums that matched the search query
  """
  albums: TaggedItemConnection! @juniper(infallible: true)

  """
  Artists that matched the search query
  """
  artists: TaggedItemConnection! @juniper(infallible: true)
}
