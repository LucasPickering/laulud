# Query types specific to our app. Includes types are used in both queries
# and mutations.

"""
The root query.
"""
type Query {
  """
  The currently logged-in user. All API access requires authentication, so this
  will always return a result.
  """
  currentUser: PrivateUser! @juniper(async: true, ownership: "owned")

  """
  Get a single item by its unique URI. Return `null` if the URI does not exist
  in Spotify
  """
  item(
    """
    Spotify URI that uniquely identifies the item to fetch
    """
    uri: SpotifyUri!
  ): TaggedItemNode @juniper(async: true, ownership: "owned")

  """
  Run a search query against all taggable Spotify items. The return value will
  contain all the matching results (within the page of data), grouped by their
  category.

  The Spotify search API only supports paginating these results in lock-step,
  meaning each item category (track, album, etc.) will use the same `first` and
  `after` params.

  https://developer.spotify.com/documentation/web-api/reference/#category-search
  """
  itemSearch(
    """
    The search query to run. The simplest queries are just alphanumeric
    searches, but Spotify supports a mini query language here. See the link to
    the Spotify docs on the parent field for more info.
    """
    query: String!

    """
    The maximum number of results to return. If null, will be unlimited.
    """
    first: Int

    """
    The cursor AFTER which elements will start being included. The element
    referred to by this cursor WILL NOT be in the output. The first element in
    the output will be the element AFTER this cursor. If null, results will
    start from the beginning of the collection.
    """
    after: Cursor
  ): ItemSearch! @juniper(async: true, ownership: "owned")

  """
  Fetch a single node, of any type, via a UUID.
  """
  node(
    """
    The UUID of the node to fetch.
    """
    id: ID!
  ): Node @juniper(async: true, ownership: "owned")

  """
  Get a single tag that the user has created. This will always return a node,
  even if the tag doesn't actually exist in the system. In that case, it will
  be returned but show no tagged items
  """
  tag(
    """
    The tag to fetch data for
    """
    tag: Tag!
  ): TagNode! @juniper(async: true, ownership: "owned")

  # TODO support pagination on this
  # lint-disable relay-connection-arguments-spec
  """
  Get a list of all tags that the user has created
  """
  tags: TagConnection! @juniper(infallible: true, ownership: "owned")
  # lint-enable relay-connection-arguments-spec
}

"""
A single tag and the items to which it has been applied. Each tag node is unique
for the pairing of tag+user
"""
type TagNode implements Node {
  """
  Unique ID for this tag node, for Relay re-fetching
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  # TODO support pagination on this field
  # lint-disable relay-connection-arguments-spec
  """
  The items that have this tag applied
  """
  items: TaggedItemConnection! @juniper(infallible: true, ownership: "owned")
  # lint-enable relay-connection-arguments-spec

  """
  The tag that (along with the requesting user) uniquely identifies this node
  """
  tag: Tag! @juniper(infallible: true, ownership: "owned")
}

"""
Edge for TagNode
"""
type TagEdge implements Edge {
  """
  Identifier for this edge
  """
  cursor: Cursor! @juniper(infallible: true)

  """
  The related node
  """
  node: TagNode! @juniper(infallible: true)
}

"""
Connection for paginating through a list of TagNode
"""
type TagConnection implements ConnectionInterface {
  """
  The queried user programs.
  """
  edges: [TagEdge!]! @juniper(async: true, ownership: "owned")

  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(async: true, ownership: "owned")

  """
  See Connection definition.
  """
  totalCount: Int! @juniper(async: true, ownership: "owned")
}

"""
Any Spotify item that can be tagged. This does **not** include all Spotify
types, e.g. user is not included in this. These fields are common across all
taggable Spotify items, so see the docs for any taggable type (`Track`,
`Artist`, etc.) for more info.
"""
interface Item {
  # lint-disable fields-have-descriptions
  externalUrls: ExternalUrls! @juniper(infallible: true)
  href: String! @juniper(infallible: true)
  id: String! @juniper(infallible: true)
  uri: SpotifyUri! @juniper(infallible: true, ownership: "owned")
  # lint-enable fields-have-descriptions
}

"""
A Spotify item (track, album, artist) etc. that supports tags, with a reference
to the list of tags that has been applied to it. Each of these nodes is unique
to a pairing of item+user
"""
type TaggedItemNode implements Node {
  """
  Unique ID for this tag node, for Relay re-fetching
  """
  id: ID! @juniper(infallible: true, ownership: "owned")

  """
  The tagged/taggable item, as fetched from Spotify
  """
  item: Item! @juniper(infallible: true)

  # TODO support pagination on this field
  # lint-disable relay-connection-arguments-spec
  """
  All tags that have been applied to this item. _Can_ be empty
  """
  tags: TagConnection! @juniper(infallible: true, ownership: "owned")
  # lint-enable relay-connection-arguments-spec
}

"""
Edge for TaggedItemNode
"""
type TaggedItemEdge implements Edge {
  """
  Identifier for this edge
  """
  cursor: Cursor! @juniper(infallible: true)

  """
  The related node
  """
  node: TaggedItemNode! @juniper(infallible: true)
}

"""
Connection for paginating through a list of TaggedItemNode
"""
type TaggedItemConnection implements ConnectionInterface {
  """
  The queried user programs.
  """
  edges: [TaggedItemEdge!]! @juniper(async: true, ownership: "owned")

  """
  See Connection definition.
  """
  pageInfo: PageInfo! @juniper(async: true, ownership: "owned")

  """
  See Connection definition.
  """
  totalCount: Int! @juniper(async: true, ownership: "owned")
}

"""
The result of performing a search query on the Spotify API. This contains one
subfield for every category of taggable items. See the itemSearch query field
that returns this type for more info
"""
type ItemSearch {
  # These fields are paginated one level up, because Spotify paginates all
  # all them in lockstep. So no need for pagination params here
  # lint-disable relay-connection-arguments-spec
  """
  Albums that matched the search query
  """
  albums: TaggedItemConnection! @juniper(infallible: true)

  """
  Artists that matched the search query
  """
  artists: TaggedItemConnection! @juniper(infallible: true)

  """
  Tracks that matched the search query
  """
  tracks: TaggedItemConnection! @juniper(infallible: true)
  # lint-enable relay-connection-arguments-spec
}
